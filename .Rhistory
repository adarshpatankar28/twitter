library(shinydashboard)
library(leaflet)
library(shiny)
library(DT)
source("globalr.r")
library(shinydashboard)
library(leaflet)
library(shiny)
library(DT)
source("globalr.r")
header <- dashboardHeader(
title = "DELHI TRAFFIC"
)
body <- dashboardBody(
fluidRow(
column(width = 9,
box(width = NULL, solidHeader = TRUE,
leafletOutput("mymap", height = 500)
),      tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
##tabPanel("table", tableOutput("table"))
tabPanel("table", DT::dataTableOutput('x1'))
), box(verbatimTextOutput('x4'))
),
actionButton("update", "Update"),
# selectInput("numTweets", "Number of Tweets:",
#            choices = numChoices),
column(width = 3,
box(verbatimTextOutput('x5')
))
)
)
ui <- dashboardPage(
header,
dashboardSidebar(disable = TRUE),
body
)
library(shiny)
server<-function(input, output, session) {
statuses <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
isolate({
withProgress({
setProgress(message = "Gathering tweets...")
# getTweets(input$numTweets)
getTweets()
})
})
})
taggeddata <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
getTaggedData(statuses())
})
checklist <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
#isolate({
withProgress({
setProgress(message = "Gathering sentiments...checklist")
# tochecklist <-
givestochecklist(taggeddata())
})
#})
})
toddfflist <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
#isolate({
withProgress({
setProgress(message = "Gathering sentiments...4todfflist")
#totoddffklist <-
givesddfflist(checklist())
})
#})
})
togivesddff.list <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
#isolate({
withProgress({
setProgress(message = "Gathering sentiments...5togiveslist")
# givesddff.list <-
givesddff.list(toddfflist())
})
#})
})
togivesoutput.list <- reactive({
# Change when the "update" button is pressed...
input$update
# ...but not for anything else
#isolate({
withProgress({
setProgress(message = "Gathering sentiments...66output")
# output.list <-
givesoutputss(togivesddff.list())
})
#})
})
##############Make the wordcloud drawing predictable during a session
### wordcloud_rep <- repeatable(wordcloud)
output$x1 <- DT::renderDataTable(
statuses()[,c("text","screenName","created","retweetCount","latitude")],server= FALSE, selection ="single")
output$mymap <- renderLeaflet({
## n <- leaflet()
# n <- addTiles(n)
#for(i in 1:length(ddff.list)){
# n <- addMarkers(n, lng=ddff.list[[i]][[2]][,1], lat=ddff.list[[i]][[2]][,2], popup="The birthplace of R")
#}
#n
s = input$x1_rows_selected
if(length(s)){
togivesoutput.list()[[s]]}
})
output$x4 = renderPrint({
s = input$x1_rows_selected
if (length(s)) {
cat('This tweet is selected:\n\n')
cat(s, sep = ', ')
}
})
output$x5 = renderPrint({
s = input$x1_rows_selected
if (length(s)) {
cat('The tweet selected has locations:\n')
if(nrow(toddfflist()[[s]])==0){
cat("No Location Found In The Selected Tweet")
}else{
cat(paste(toddfflist()[[s]]$frm.database,collapse = "\n"))}
}
})
}
shinyApp(ui,server)
shiny::runApp()
distance<-function(tocheck){
if(length(tocheck)==0){
mymatch.s1.s3<-data.frame()
}else{
getbig <- function(input){
input<-tolower(input)
splitted<-strsplit(input,split =" ")
splitted<-splitted[[1]]
out<-list()
for(i in 1:length(splitted)){
if(nchar(splitted[i])==1)
{
out[[i]]<-splitted[i]
}
else{
out[[i]]<-substring(splitted[i], 1:(nchar(splitted[i])-1), 2:nchar(splitted[i]))
}
}
out
output<-unlist(out)
output
}
####simial
similar<-function(of1,of2){
union<-length(of1)+length(of2)
count=0
for (x in of1){
for (y in of2){
if(x == y){
count =count + 1
break}}}
(2.0 *count)/union*100
}
tocheck<-as.array(tocheck)
if(is.matrix(apply(tocheck,1,getbig))){
maatr<-(apply(tocheck,1,getbig))
afterbigtocheck<-split(maatr, rep(1:ncol(maatr), each = nrow(maatr)))
}else{
afterbigtocheck<-(apply(tocheck,1,getbig))
}
ssee<-list()
for(i in 1:length(afterbigtodata)){
ssee[[i]]<-sapply(afterbigtocheck,similar,afterbigtodata[[i]])}
hhh<-matrix(unlist(ssee), nrow=length(afterbigtocheck))
hhh
mymin.name<-apply(hhh, 1, max)
mymatch.s1.s3<-NULL
for(i in 1:nrow(hhh))
{
s2.i<-match(mymin.name[i],hhh[i,])
s1.i<-i
mymatch.s1.s3<-rbind(data.frame(s2.i=s2.i,s1.i=s1.i,frm.database=database[s2.i], to.check=tocheck[s1.i], adist=mymin.name[i]),mymatch.s1.s3)
}
(mymatch.s1.s3)
mymatch.s1.s3<-mymatch.s1.s3[which(mymatch.s1.s3$adist>72),]
mymatch.s1.s3
}
}
saveRDS(distance,"distance.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
